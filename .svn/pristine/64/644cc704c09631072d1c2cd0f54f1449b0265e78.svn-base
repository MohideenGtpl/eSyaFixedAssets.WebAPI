using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using eSyaFixedAssets.DO;
using eSyaFixedAssets.IF;
using eSyaFixedAssets.DL.Entities;

namespace eSyaFixedAssets.DL.Repository
{
    public class AssetGroupRepository : IAssetGroupRepository
    {
        #region Asset Group
        public async Task <List<DO_AssetGroup>> GetAssetGroupTreeView()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEfxaag
                        .AsNoTracking()
                        .Select(r => new DO_AssetGroup
                        {
                            AssetGroupId = r.AssetGroupId,
                            AssetGroupDesc = r.AssetGroupDesc,
                            ParentId=r.ParentId,
                            ActiveStatus=r.ActiveStatus
                        }).ToListAsync();

                    return await ds;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_AssetGroup> GetAssetGroupbyId(int AssetId)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var asset_group =await db.GtEfxaag.Where(x=>x.AssetGroupId==AssetId )
                        .AsNoTracking()
                        .Select(r => new DO_AssetGroup
                        {
                            AssetGroupId = r.AssetGroupId,
                            AssetGroupDesc = r.AssetGroupDesc,
                            ParentId = r.ParentId,
                            ActiveStatus = r.ActiveStatus
                        }).FirstOrDefaultAsync();

                    return asset_group;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateAssetGroup(DO_AssetGroup obj)
        {
            bool result;

            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        bool is_assetExist = db.GtEfxaag.Any(a => a.AssetGroupId == obj.AssetGroupId);

                        if (is_assetExist)
                        {
                            result = await UpdateAssetGroup(obj);
                            if (result)
                            {
                                dbContext.Commit();
                                return new DO_ReturnParameter() { Status = true, Message = "Updated Successfully." };
                            }
                            else
                            {
                                return new DO_ReturnParameter() { Status = true, Message = "Updated Failed." };
                            }

                        }
                        else
                        {
                            result = await InsertAssetGroup(obj);
                            if (result)
                            {
                                dbContext.Commit();
                                return new DO_ReturnParameter() { Status = true, Message = "Created Successfully." };
                            }
                            else
                            {
                                return new DO_ReturnParameter() { Status = true, Message = "Created Failed." };
                            }

                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonDataRepository.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<bool> InsertAssetGroup(DO_AssetGroup obj)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    int max_assetId = db.GtEfxaag.Select(c => c.AssetGroupId).DefaultIfEmpty().Max();
                    int assetgroupId = max_assetId + 1;

                    var asset = new GtEfxaag()
                    {
                        AssetGroupId = assetgroupId,
                        ParentId = obj.ParentId,
                        AssetGroupDesc = obj.AssetGroupDesc,
                        ActiveStatus = obj.ActiveStatus,
                        FormId = obj.FormId,
                        CreatedBy = obj.UserID,
                        CreatedOn = System.DateTime.Now,
                        CreatedTerminal = obj.TerminalID
                    };
                    db.GtEfxaag.Add(asset);
                    await db.SaveChangesAsync();
                    return true;
                }
                catch (DbUpdateException ex)
                {
                    throw new Exception(CommonDataRepository.GetValidationMessageFromException(ex));
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<bool> UpdateAssetGroup(DO_AssetGroup obj)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    GtEfxaag asset = db.GtEfxaag.Where(w => w.AssetGroupId == obj.AssetGroupId).FirstOrDefault();
                    asset.AssetGroupDesc = obj.AssetGroupDesc;
                    asset.ActiveStatus = obj.ActiveStatus;
                    asset.ModifiedBy = obj.UserID;
                    asset.ModifiedOn = System.DateTime.Now;
                    asset.ModifiedTerminal = obj.TerminalID;
                    await db.SaveChangesAsync();
                    return true;
                }
                catch (DbUpdateException ex)
                {
                    throw new Exception(CommonDataRepository.GetValidationMessageFromException(ex));
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        #endregion Asset Group

        #region Depreciation Method
        public async Task<DO_ReturnParameter> InsertDepreciationMethod(List<DO_AssetDepreciationMethod> obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        foreach (DO_AssetDepreciationMethod adm in obj)
                        {
                            GtEfxadm amdm;

                            amdm = db.GtEfxadm.Where(x => x.AssetGroupId == adm.AssetGroupId  && x.DepreciationMethod == adm.DepreciationMethod && x.EffectiveTill == null).FirstOrDefault();

                            if (amdm == null)
                            {
                                if (adm.DepreciationPercentage > 0)
                                {
                                    amdm = new GtEfxadm
                                    {
                                        AssetGroupId = adm.AssetGroupId,
                                        DepreciationMethod = adm.DepreciationMethod,
                                        EffectiveFrom = adm.EffectiveFrom,
                                        EffectiveTill = adm.EffectiveTill,
                                        DepreciationPercentage = adm.DepreciationPercentage,
                                        ActiveStatus = adm.ActiveStatus,
                                        FormId = adm.FormId,
                                        CreatedBy = adm.UserID,
                                        CreatedOn = System.DateTime.Now,
                                        CreatedTerminal = adm.TerminalID
                                    };
                                    db.GtEfxadm.Add(amdm);
                                }
                            }
                            else
                            {
                                amdm = db.GtEfxadm.Where(x => x.AssetGroupId == adm.AssetGroupId  && x.DepreciationMethod == adm.DepreciationMethod && x.EffectiveFrom == adm.EffectiveFrom).FirstOrDefault();

                                if (amdm == null)
                                {
                                    GtEfxadm _adm = db.GtEfxadm.Where(x => x.AssetGroupId == adm.AssetGroupId && x.DepreciationMethod == adm.DepreciationMethod && x.EffectiveTill == null).First();

                                    _adm.EffectiveTill = adm.EffectiveFrom.AddDays(-1);
                                    _adm.ModifiedBy = adm.UserID;
                                    _adm.ModifiedOn = System.DateTime.Now;
                                    _adm.ModifiedTerminal = adm.TerminalID;

                                    amdm = new GtEfxadm
                                    {
                                        AssetGroupId = adm.AssetGroupId,
                                        DepreciationMethod = adm.DepreciationMethod,
                                        EffectiveFrom = adm.EffectiveFrom,
                                        EffectiveTill = adm.EffectiveTill,
                                        DepreciationPercentage = adm.DepreciationPercentage,
                                        ActiveStatus = adm.ActiveStatus,
                                        FormId = adm.FormId,
                                        CreatedBy = adm.UserID,
                                        CreatedOn = System.DateTime.Now,
                                        CreatedTerminal = adm.TerminalID
                                    };
                                    db.GtEfxadm.Add(amdm);
                                }
                                else
                                {
                                    amdm = db.GtEfxadm.Where(x => x.AssetGroupId == adm.AssetGroupId  && x.DepreciationMethod == adm.DepreciationMethod && x.EffectiveFrom == adm.EffectiveFrom).First();

                                    amdm.DepreciationPercentage = adm.DepreciationPercentage;
                                    amdm.ActiveStatus = adm.ActiveStatus;
                                    amdm.ModifiedBy = adm.UserID;
                                    amdm.ModifiedOn = System.DateTime.Now;
                                    amdm.ModifiedTerminal = adm.TerminalID;

                                }
                            }
                        }
                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Depreciation Methods Created Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        throw new Exception(CommonDataRepository.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateDepreciationMethod(DO_AssetDepreciationMethod obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEfxadm dm = db.GtEfxadm.Where(x => x.AssetGroupId == obj.AssetGroupId && x.DepreciationMethod == obj.DepreciationMethod && x.EffectiveFrom == obj.EffectiveFrom).FirstOrDefault();

                        if (dm == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Depreciation Method does not exist." };
                        }

                        dm.ActiveStatus = obj.ActiveStatus;
                        dm.DepreciationPercentage = obj.DepreciationPercentage;
                        dm.EffectiveTill = obj.EffectiveTill;
                        dm.ModifiedBy = obj.UserID;
                        dm.ModifiedOn = System.DateTime.Now;
                        dm.ModifiedTerminal = obj.TerminalID;

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Depreciation Method Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public  List<DO_AssetDepreciationMethod> GetAssetDepreciationMethodsbyAssGroupId(int assetGroupId)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ag = db.GtEcapcd
                        .GroupJoin(db.GtEfxadm.Where(w => w.ActiveStatus == true && w.EffectiveTill == null && w.AssetGroupId == assetGroupId),
                        g => new { g.ApplicationCode },
                        a => new { ApplicationCode = a.DepreciationMethod },
                        (g, a) => new { g, a = a.FirstOrDefault() }).DefaultIfEmpty()
                        .Where(x => x.g.ActiveStatus == true && x.g.CodeType == CodeTypeValue.DrepreciationMethod)
                        .AsNoTracking()
                        .AsEnumerable()
                        .Select(x => new DO_AssetDepreciationMethod
                        {
                            AssetGroupId = x.a != null ? x.a.AssetGroupId : 0,
                            DepreciationMethod = x.g.ApplicationCode,
                            DepreciationMethodDesc = x.g.CodeDesc,
                            DepreciationPercentage = x.a != null ? x.a.DepreciationPercentage : 0,
                            EffectiveFrom = x.a != null ? x.a.EffectiveFrom : System.DateTime.Now.Date,
                            EffectiveTill = null,
                            ActiveStatus = x.g.ActiveStatus
                        }).OrderBy(o => o.DepreciationMethodDesc).ToList();


                    return ag;

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<List<DO_AssetGroup>> GetAssetGroupforGrid()
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var ds = db.GtEfxaag
                        .AsNoTracking()
                        .Select(r => new DO_AssetGroup
                        {
                            AssetGroupId = r.AssetGroupId,
                            AssetGroupDesc = r.AssetGroupDesc,
                            ParentId = r.ParentId,
                            ActiveStatus = r.ActiveStatus
                        }).ToListAsync();

                    return await ds;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion Depreciation Method
    }
}
